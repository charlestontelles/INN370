package asgn2GUI;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import asgn2Exceptions.TrainException;
import asgn2RollingStock.FreightCar;
import asgn2RollingStock.Locomotive;
import asgn2RollingStock.PassengerCar;
import asgn2RollingStock.RollingStock;
import asgn2Train.DepartingTrain;

/**
 * Graphical user interface to arrange all panels related to departing train
 * configuration.
 * 
 * This JFrame is also a action listener handling all events generated by
 * panels.
 * 
 * @author Charleston Telles
 * 
 */
public class DepartingTrainFrame extends JFrame implements ActionListener {

	/**
	 * Mandatory class ID to be used by serialisation
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Panel related to a departing Train canvas
	 */
	private AssembledTrainPanel assembledTrainPanel;
	/**
	 * Panel related to passenger car configuration
	 */
	private PassengerCarPanel passengerCarPanel;
	/**
	 * Panel related to boarding passengers configuration
	 */
	private BoardingTrainPanel boardingTrainPanel;
	/**
	 * Panel related to locomotive configuration
	 */
	private LocomotivePanel locomotivePanel;
	/**
	 * Panel related to freight car configuration
	 */
	private FreightCarPanel freightCarPanel;

	/**
	 * The departing train being configured
	 */
	private DepartingTrain departingTrain;

	/**
	 * Default Constructor
	 * 
	 * @param title
	 *            the application screen title
	 * 
	 * @throws HeadlessException
	 */
	public DepartingTrainFrame(String title) throws HeadlessException {
		super(title);
		initComponents();
	}

	/**
	 * Sets the JFrame Layout and arrange the components in the screen
	 * 
	 */
	private void initComponents() {
		setExtendedState(Frame.MAXIMIZED_BOTH);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new BorderLayout());

		departingTrain = new DepartingTrain();

		assembledTrainPanel = new AssembledTrainPanel(departingTrain, this);
		passengerCarPanel = new PassengerCarPanel(this);
		boardingTrainPanel = new BoardingTrainPanel(this);
		locomotivePanel = new LocomotivePanel(this);
		freightCarPanel = new FreightCarPanel(this);

		this.getContentPane().add(assembledTrainPanel, BorderLayout.CENTER);
		this.getContentPane().add(passengerCarPanel, BorderLayout.SOUTH);
		this.getContentPane().add(boardingTrainPanel, BorderLayout.NORTH);
		this.getContentPane().add(locomotivePanel, BorderLayout.WEST);
		this.getContentPane().add(freightCarPanel, BorderLayout.EAST);
	}

	/**
	 * Handles all events created within the Departing Train application.
	 * 
	 * Also capture all exceptions eventually created by events and shows the
	 * messages to the user in a friendly way.
	 * 
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		try {

			if (((JButton) e.getSource()).getParent() instanceof LocomotivePanel) {
				handleLocomotivePanelEvents(e);
			} else if (((JButton) e.getSource()).getParent() instanceof PassengerCarPanel) {
				handlePassengerCarPanelEvents(e);
			} else if (((JButton) e.getSource()).getParent() instanceof FreightCarPanel) {
				handleFreightCarPanelEvents(e);
			} else if (((JButton) e.getSource()).getParent() instanceof BoardingTrainPanel) {
				handleBoardingTrainPanelEvents(e);
			}
			this.repaint(); // VERY IMPORTANT: IT REPAINTS THE WHOLE FRAME
			updateBoardingPanel();

		} catch (Exception ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(),
					"Train Configuration Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Handles a new locomotive creation event
	 * 
	 * @param e
	 *            actionEvent
	 * 
	 * @throws TrainException
	 */
	private void handleLocomotivePanelEvents(ActionEvent e)
			throws TrainException {
		LocomotivePanel panel = (LocomotivePanel) ((JButton) e.getSource())
				.getParent();
		int weight = panel.getWeight();
		int powerClass = panel.getPowerClass();
		String engineType = panel.getEngineType();
		departingTrain.addCarriage(new Locomotive(weight, powerClass
				+ engineType));
	}

	/**
	 * Handles a new passenger car creation event
	 * 
	 * @param e
	 *            actionEvent
	 * 
	 * @throws TrainException
	 */
	private void handlePassengerCarPanelEvents(ActionEvent e)
			throws TrainException {
		PassengerCarPanel panel = (PassengerCarPanel) ((JButton) e.getSource())
				.getParent();
		int weight = panel.getWeight();
		int numberOfSeats = panel.getNumberOfSeats();
		departingTrain.addCarriage(new PassengerCar(weight, numberOfSeats));
	}

	/**
	 * Handle a new freight car creation event
	 * 
	 * @param e
	 *            actionEvent
	 * 
	 * @throws TrainException
	 */
	private void handleFreightCarPanelEvents(ActionEvent e)
			throws TrainException {
		FreightCarPanel panel = (FreightCarPanel) ((JButton) e.getSource())
				.getParent();
		int weight = panel.getWeight();
		String goodsType = panel.getGoodsType();
		departingTrain.addCarriage(new FreightCar(weight, goodsType));
	}

	/**
	 * Handles events related to passenger boarding panel.
	 * 
	 * @param e
	 *            actionEvent
	 * 
	 * @throws TrainException
	 */
	private void handleBoardingTrainPanelEvents(ActionEvent e)
			throws TrainException {
		BoardingTrainPanel panel = (BoardingTrainPanel) ((JButton) e
				.getSource()).getParent();

		if (e.getActionCommand().equalsIgnoreCase("remove car")) {
			departingTrain.removeCarriage();
		} else if (e.getActionCommand().equalsIgnoreCase("board")) {
			panel.setPassengerOut(""
					+ departingTrain.board(panel.getNumberOfPassenger()));
		} else if (e.getActionCommand().equalsIgnoreCase("reset")) {
			RollingStock rollingStock;
			departingTrain.firstCarriage();
			while ((rollingStock = departingTrain.nextCarriage()) != null) {
				if (rollingStock instanceof PassengerCar) {
					((PassengerCar) rollingStock)
							.alight(((PassengerCar) rollingStock)
									.numberOnBoard());
				}
			}
			departingTrain.firstCarriage();
			do {
				departingTrain.removeCarriage();
			} while ((rollingStock = departingTrain.nextCarriage()) != null);

		}
	}

	/**
	 * Updates the information about the current departing train.
	 */
	private void updateBoardingPanel() {
		RollingStock locomotive = departingTrain.firstCarriage() instanceof Locomotive ? departingTrain
				.firstCarriage() : null;
		boardingTrainPanel.setTrainCanMove("" + departingTrain.trainCanMove());
		boardingTrainPanel.setLocomotiveCapacity(locomotive != null ? ""
				+ ((Locomotive) locomotive).power() : "0");
		boardingTrainPanel.setNumberOnBoard(departingTrain.numberOnBoard()
				+ "/" + departingTrain.numberOfSeats());
	}

	/**
	 * Main method used to initialise a Departing Train application
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		DepartingTrainFrame departingTrainFrame = new DepartingTrainFrame(
				"Departing Train");

		departingTrainFrame.setVisible(true);
	}

}
